---
title: "First ngtags App"
tags:
  - ngtags
  - angular
  - app
  - javascript
  - html
  - grunt
date: 2015-02-05
---

[Ngtags](http://ngtags.org) objective is to simplify the creation of [AngularJS](https://angularjs.org) apps. Instead of creating complex _directive_ and _routes_ structure definitions it allows to create them through an `html` like tags self explained and contained. Say hello:

```html
<angular-element name="say-hello">
    <template>
        <h1>Hello</h1>
    </template>
</angular-element>
```

See examples:
- [Say hello](https://github.com/ngtags/ngtags/blob/master/examples/example-say-hello.md)
- [Count cliks](https://github.com/ngtags/ngtags/blob/master/examples/example-count-clicks.md)
- [More examples](https://github.com/ngtags/ngtags/blob/master/examples/index.md)
- [Start example](https://github.com/ngtags/grunt-ngtags-example)



## First app

The first app is this same web page. The idea behind is to in one hand test and evaluate the tool and in the other to demonstrate that it is useful. 

It is used in three aspects: generate CSS code, generate html components, and generate routes. Source code can be found at [my github](https://github.com/drpicox/david-rodenas.com).

The CSS code is generated with less. In each ngtag file it has a `<script>` section wich in fact contains less code. This code is compiled with the rest less code of the web page (containing common parts and variables) and included as a single css in the `index.html` file.

Components are inside [app/components](https://github.com/drpicox/david-rodenas.com/tree/master/app/components). Each represents one part of the visualization of the web page and can be composed. They are translated automatically by the grunt-ngtags into plain angular javascript files and included in the `index.html` file. 

Pages are inside [app/pages](https://github.com/drpicox/david-rodenas.com/tree/master/app/pages). Each file combines the controller, resolvers, and the visualization

Everything is compiled automatically by using [grunt-ngtags](https://github.com/ngtags/grunt-ngtags) inside the _grunt_ task flow, so it is integrated in the whole web compilation/development. All transformations and steps involving _ngtags_ are performed in serverside and generate static files, so no special support required by any server or by browser (not even libraries).


## What ngtags provides

The _ngtags_ is build to satisfy the following conditions:

- It translates to Javascript Angular code, so, at the end, all that you have are Angular directives (the same that you would write by yoursel). If you do not like ngtags, you can throw it away and start using the generated code instead,

- It combines style+html+script in the same file, so you can keep high cohesion keeping related things together. It simplifies editing and context changes, if your components are small enough (as they should be) you can see in the same file all involved and affected parts.

- It assumes jshint. Yes, it does. So, all generated code are able to be processed by the jshint and be validates as good. So, when you integrate it with grunt you can see if you write invalid javascript code, jshint validates it for you.

- It uses high code styles. Generated code is compilant with John Papa [styleguide](https://github.com/johnpapa/angularjs-styleguide). So the resultant code will have high quality.

- It uses a templated compiler. Code generation is generated by templates, in a similar way that [yeoman](http://yeoman.io/) does. Templates are also configurable, so, if you want, you can replace them by your own templates so you can generate the code as you want. You are not tied to whatever _ngtags_ produces. You want to split output? you can do, you want to follow another styleguide? is up to you.

In some way, it is like a yeoman generator like, but, instead of generate the code once and then keep it up to date by hand, it continuosly prepares and generates the code that we need.



## Easy to maintain

The main objective of the `ngtags` is to make Angular apps easier to maintain. Until now I have discovered the following things:

- it is easier to create and ngtag component or page than the actual route+html or directive+html+style,

- it reduces possibilities (for example, use controller by default over scope) so it creates more homogenous code,

- having html and style in the same file makes more easy to find where to change css related to specific html,

- grunt is still working, so livereload is still working, and, for now it is fast, but if I need more speed I can compile each ngtag separately and use _grunt-newer_ to compile only newer, so it will keep going fast,

I want to prove that apps build with ngtags are easy to maintain. I expect to prove that affirmation true in the next months.


## Do your own app

It is as easy as a pie:

```bash
$ git clone https://github.com/ngtags/grunt-ngtags-example
$ cd grunt-ngtags-example
$ npm install
$ bower install
$ grunt serve
```

And open http://localhost:9865 in your browser.

